import json
from vkbottle import GroupEventType, Keyboard, EMPTY_KEYBOARD, Text, GroupTypes, KeyboardButtonColor
from vkbottle.bot import Message, BotLabeler, MessageEvent, Bot
import proekt.utils as utils
char = BotLabeler()



@char.message(payload={'menu': 'char'})
async def character(message: Message):
    user_db = utils.get_user_by_id(message.from_id)
    user = json.loads(user_db.user)
    other = json.loads(user_db.other)
    lvl = json.loads(user_db.lvls)

    keyboard = EMPTY_KEYBOARD
    keyboard = Keyboard()
    keyboard.add(Text('–ü—Ä–æ–∫–∞—á–∫–∞', {'char': 'lvl'}), color=KeyboardButtonColor.NEGATIVE)
    keyboard.row()
    keyboard.add(Text('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ', {'char': "heall"}), color=KeyboardButtonColor.POSITIVE)
    keyboard.row()
    keyboard.add(Text('–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', {'menu': 'char'}))
    keyboard.add(Text('–ú–µ–Ω—é', {'menu': 'menu'}))

    await message.answer(f"–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞ {other['nick']}\nüÜî{user_db.vk_id}\n"
                         f"–ó–¥–æ—Ä–æ–≤—å–µ {user['cur_hp']}‚ô• / {user['hp']}‚ô•\n"
                         f"–£—Ä–æ–Ω {user['cur_dmg']}üó°\n"
                         f"–ó–æ–ª–æ—Ç–æ {other['gold']}üí∞ –ê–ª–º–∞–∑—ã {other['diamond']}üíé\n"
                         f"–£—Ä–æ–≤–µ–Ω—å {user['lvl']}‚≠ê –û–ø—ã—Ç {user['exp']}/{lvl['char']}‚ú®",
                         keyboard=keyboard, attachment='photo-223986632_456239021')


@char.message(payload={'char': 'lvl'})
async def lvl_up(message: Message):
    user_db = utils.get_user_by_id(message.from_id)
    user = json.loads(user_db.user)
    lvl = json.loads(user_db.lvls)

    keyboard = EMPTY_KEYBOARD
    keyboard = Keyboard()
    keyboard.add(Text("–ü—Ä–æ–∫–∞—á–∞—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ", {'lvl': 'hp'}), color=KeyboardButtonColor.POSITIVE)
    keyboard.row()
    keyboard.add(Text("–ü—Ä–æ–∫–∞—á–∞—Ç—å —É—Ä–æ–Ω", {'lvl': 'dmg'}), color=KeyboardButtonColor.NEGATIVE)
    keyboard.row()
    keyboard.add(Text('–ú–µ–Ω—é', {'menu': 'menu'}))

    await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–∫–∞—á–∞—Ç—å\n"
                         f"–ü—Ä–æ–∫–∞—á–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –¥–∞—ë—Ç {user['hp_lvl']*5}\n"
                         f"–£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–∫–∞—á–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è {user['hp_lvl']}\n"
                         f"–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–∫–∞—á–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è {lvl['hp']}üí∞\n\n"
                         f"–ü—Ä–æ–∫–∞—á–∫–∞ —É—Ä–æ–Ω–∞ –¥–∞—ë—Ç {user['dmg_lvl']}\n"
                         f"–£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–∫–∞—á–∫–∏ —É—Ä–æ–Ω–∞ {user['dmg_lvl']}\n"
                         f"–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–∫–∞—á–∫–∏ —É—Ä–æ–Ω–∞ {lvl['dmg']}üí∞\n\n",

                         keyboard=keyboard)

@char.message(payload={'lvl': 'hp'})
async def hp_up(message: Message):
    user_db = utils.get_user_by_id(message.from_id)
    user = json.loads(user_db.user)
    lvl = json.loads(user_db.lvls)
    other = json.loads(user_db.other)

    if other['gold'] >= lvl['hp']:
        user['hp'] += 5
        user['cur_hp'] += 5
        other['gold'] -= lvl['hp']
        lvl['hp'] += 100
        user['hp_lvl'] += 1
        user_db.user = json.dumps(user, ensure_ascii=False)
        user_db.other = json.dumps(other, ensure_ascii=False)
        user_db.lvls = json.dumps(lvl, ensure_ascii=False)
        user_db.save()
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∫–∞—á–∞–ª–∏ –∑–¥–æ—Ä—å–µ")

    elif other['gold'] < lvl['hp']:
        await message.answer("–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞")
    else:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')


@char.message(payload={'lvl': 'dmg'})
async def dmg_up(message: Message):
    user_db = utils.get_user_by_id(message.from_id)
    user = json.loads(user_db.user)
    lvl = json.loads(user_db.lvls)
    other = json.loads(user_db.other)

    if other['gold'] >= lvl['dmg']:
        user['dmg'] += 1
        user['cur_dmg'] += 1
        other['gold'] -= lvl['dmg']
        lvl['dmg'] += 100
        user['dmg_lvl'] += 1
        user_db.user = json.dumps(user, ensure_ascii=False)
        user_db.other = json.dumps(other, ensure_ascii=False)
        user_db.lvls = json.dumps(lvl, ensure_ascii=False)
        user_db.save()
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∫–∞—á–∞–ª–∏ —É—Ä–æ–Ω")

    elif other['gold'] < lvl['dmg']:
        await message.answer("–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞")
    else:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')


@char.message(payload={'char': "heall"})
async def heal(message: Message):
    user_db = utils.get_user_by_id(message.from_id)
    user = json.loads(user_db.user)
    if user['cur_hp'] == user['hp']:
        await message.answer("–£ –í–∞—Å —É–∂–µ –ø–æ–ª–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ")
    elif user['cur_hp'] < user['hp']:
        user['cur_hp'] = int(user['hp'])
        user_db.user = json.dumps(user, ensure_ascii=False)
        user_db.save()
        await message.answer("–ó–¥–æ—Ä–æ–≤—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    elif user['cur_hp'] > user['hp']:
        user['cur_hp'] = int(user['hp'])
        user_db.user = json.dumps(user, ensure_ascii=False)
        user_db.save()
        await message.answer("–í–µ—Ä–Ω—É–ª –∑–¥–æ—Ä–æ–≤—å–µ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è")
